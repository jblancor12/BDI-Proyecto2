USE `pe`;
DROP procedure IF EXISTS `insert_edition`;

DELIMITER $$
USE `pe`$$
CREATE PROCEDURE `insert_edition`(pdescription VARCHAR(45))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
    ROLLBACK;
    SELECT 'An error has occurred';
END;
	INSERT INTO edition(description)
	VALUES(pdescription);
END$$

DELIMITER ;


USE `pe`;
DROP procedure IF EXISTS `remove_edition`;

DELIMITER $$
USE `pe`$$
CREATE PROCEDURE `remove_edition`(pid_edition INT)
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
    ROLLBACK;
    SELECT 'An error has occurred';
END;
	DELETE FROM edition
	WHERE id_edition = pid_edition;
END$$

DELIMITER ;


USE `pe`;
DROP procedure IF EXISTS `update_edition_description`;

DELIMITER $$
USE `pe`$$
CREATE PROCEDURE `update_edition_description` (pid_edition INT, pdescription VARCHAR(45))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
    ROLLBACK;
    SELECT 'An error has occurred';
END;
	UPDATE edition
	SET description = pdescription
	WHERE id_edition = pid_edition;
END$$

DELIMITER ;











